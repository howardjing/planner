var app = angular.module('app', ['ngResource', 'ngCookies', 'ui.bootstrap.modal', 'ui.bootstrap.collapse']);

// add csrf token to headers
app.config(['$httpProvider', function($httpProvider) {
  var csrfToken;
  var metaTags = document.getElementsByTagName('meta');
  for (var i=0; i<metaTags.length; i++) {
    if (metaTags[i].getAttribute('name') === 'csrf-token') {
      csrfToken = metaTags[i].getAttribute('content');
      break;
    }
  }
  $httpProvider.defaults.headers.common['X-CSRF-Token'] = csrfToken;
}]);

// redirect to login when 401
app.config(["$httpProvider", function($httpProvider) {
  $httpProvider.interceptors.push("SigninInterceptor");
}]);

// routing
app.config(['$routeProvider', function($routeProvider) {
  $routeProvider
  .when('/', { 
    templateUrl: "<%= asset_path 'views/projects/index.html' %>",
    controller: 'ProjectsIndexCtrl',
    // abusing the resolve object to set the breadcrumb
    resolve: {
      meta: ['Breadcrumb', 'Meta', function(Breadcrumb, Meta) {
        Breadcrumb.setCrumb('projects');
        Meta.setTitle('Planner');
      }]
    }
  })
  .when('/signin', {
    templateUrl: "<%= asset_path 'views/signin.html' %>",
    controller: 'NavbarCtrl', 
    resolve: {
      meta: ['Breadcrumb', 'Meta', function(Breadcrumb, Meta) {
        Breadcrumb.setCrumb('signin');
        Meta.setTitle('Planner: Signin');
      }]
    }
  })
  .when('/projects', { 
    templateUrl: "<%= asset_path 'views/projects/index.html' %>",
    controller: 'ProjectsIndexCtrl',
    resolve: {
      meta: ['Breadcrumb', 'Meta', function(Breadcrumb, Meta) {
        Breadcrumb.setCrumb('projects');
        Meta.setTitle('Planner: projects');
      }]
    }
  })
  .when('/projects/trash', {
    templateUrl: "<%= asset_path 'views/projects/trash.html' %>",
    controller: 'ProjectsTrashCtrl',
    resolve: {
      meta: ['Breadcrumb', 'Meta', function(Breadcrumb, Meta) {
        Breadcrumb.setCrumb('projectsTrash');
        Meta.setTitle('Planner: projects trash');
      }]
    }
  })
  .when('/projects/:id', {
    templateUrl: "<%= asset_path 'views/projects/show.html' %>",
    controller: 'ProjectsShowCtrl',
    resolve: {
      project: ['$q', '$route', 'ProjectService', 'Breadcrumb', 'Meta',
      function($q, $route, ProjectService, Breadcrumb, Meta) {
        var deferred = $q.defer();
        ProjectService.get({id: $route.current.params.id, tagged_with: $route.current.params.tag}, 
          function(project) {
            Breadcrumb.setCrumb('project', { project: project });
            Meta.setTitle('Planner: ' + project.title);
            deferred.resolve(project);
          }, function(response) {
            deferred.reject(response.data);
          });
        return deferred.promise;
      }]
    }
  })
  .when('/projects/:id/trash', {
    templateUrl: "<%= asset_path 'views/tasks/trash.html' %>",
    controller: 'TasksTrashCtrl',
    resolve:  {
      project: ['$q', '$route', 'ProjectService', 'Breadcrumb', 'Meta',
      function($q, $route, ProjectService, Breadcrumb, Meta) {
        var deferred = $q.defer();
        ProjectService.get({id: $route.current.params.id, trashed: true },
          function(project) {
            Breadcrumb.setCrumb('tasksTrash', { project: project });
            Meta.setTitle('Planner: ' + project.title + ' trash');
            deferred.resolve(project);
          }, function(response) {
            deferred.reject(response.data);
          });
        return deferred.promise;
      }]
    }
  })
  .when('/projects/:projectId/tasks/:id', {
    templateUrl: "<%= asset_path 'views/tasks/show.html' %>",
    controller: 'TasksShowCtrl',
    resolve: {
      task: ['$q', '$route', 'TaskService', 'Breadcrumb', 'Meta',
      function($q, $route, TaskService, Breadcrumb, Meta) {
        var deferred = $q.defer();
        TaskService.get({projectId: $route.current.params.projectId, id: $route.current.params.id},
          function(task) {
            Breadcrumb.setCrumb('task', { task: task, project: task.project });
            Meta.setTitle('Planner: ' + task.title)
            deferred.resolve(task);
          }, function(response) {
            deferred.reject(response.data);
          });
        return deferred.promise;
      }]
    }
  })
}])